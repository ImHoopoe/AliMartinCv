@using AliMartinCv.DataLayer.Entities
@using AliMartinCv.DataLayer.DTos
@using AliMartinCv.Core.Convertors
@using AliMartinCv.Core.Tools
@using System.Globalization
@using System.Collections.Generic
@model List<AttendanceRecord>

@{
    Layout = "/areas/student/views/shared/_StudentLayout.cshtml";
    ViewData["Title"] = "نمایش حضور و غیاب";

    var persianCalendar = new PersianCalendar();
    var currentShamsiYear = DateTime.Now.GetShamsiYear();

    var months = new List<string> { "مهر", "آبان", "آذر", "دی", "بهمن", "اسفند", "فروردین", "اردیبهشت", "خرداد", "تیر", "مرداد", "شهریور" };
    var shamsiMonthsMap = new int[] { 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6 };
    var daysOfWeek = new List<string> { "شنبه", "یکشنبه", "دوشنبه", "سه‌شنبه", "چهارشنبه", "پنج‌شنبه", "جمعه" };

    var dayIndexMap = new Dictionary<DayOfWeek, int>
    {
        { DayOfWeek.Saturday, 0 },
        { DayOfWeek.Sunday, 1 },
        { DayOfWeek.Monday, 2 },
        { DayOfWeek.Tuesday, 3 },
        { DayOfWeek.Wednesday, 4 },
        { DayOfWeek.Thursday, 5 },
        { DayOfWeek.Friday, 6 }
    };

    // پیش‌پردازش داده‌ها
    var students = Model.GroupBy(s => s.StudentId).Select(g => g.First()).OrderBy(s => s.Name).ToList();
    var attendanceByStudent = Model.GroupBy(r => r.StudentId).ToDictionary(g => g.Key, g => g.ToList());
}

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="پنل مدیریت مدرسه برای نظارت بر وضعیت دانش‌آموزان، نمرات و غیبت‌ها.">
    <meta name="keywords" content="پنل مدیریت مدرسه, وضعیت دانش‌آموز, غیبت‌ها, نمرات, پیام معلم">
    <meta name="author" content="Ali Martin">
    <meta name="robots" content="index, follow"> <!-- برای SEO -->
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>@ViewData["Title"]</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link href="https://cdn.jsdelivr.net/gh/rastikerdar/vazir-font@v30.1.0/dist/font-face.css" rel="stylesheet" type="text/css" />
    <style>
        body {
            font-family: 'Vazir', sans-serif;
            background: linear-gradient(135deg, #f0f4f8, #d9e2ec); /* پس‌زمینه مدرن گرادیان */
            min-height: 100vh;
            overflow-x: hidden;
        }

        .attendance-table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0 10px;
            margin-bottom: 20px;
            background: rgba(255, 255, 255, 0.1); /* نیمه‌شفاف برای گلس مورفیسم */
            backdrop-filter: blur(10px); /* بلور برای گلس مورفیسم */
            border-radius: 15px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

            .attendance-table th, .attendance-table td {
                padding: 15px;
                text-align: center;
                border: none;
                transition: transform 0.3s ease, box-shadow 0.3s ease;
            }

            .attendance-table th {
                background: rgba(255, 255, 255, 0.2);
                color: #333;
                font-weight: 600;
                border-bottom: 1px solid rgba(255, 255, 255, 0.2);
            }

            .attendance-table td {
                font-size: 1.1rem;
                background: rgba(255, 255, 255, 0.05);
                border-radius: 8px;
                box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.05);
            }

            .attendance-table tr:hover td {
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            }

        .present {
            background-color: rgba(40, 167, 69, 0.8); /* سبز شفاف */
            color: white;
            animation: fadeInCell 0.5s ease-in-out forwards;
        }

        .absent {
            background-color: rgba(220, 53, 69, 0.8); /* قرمز شفاف */
            color: white;
            animation: fadeInCell 0.5s ease-in-out forwards;
        }

        .missing {
            background-color: rgba(255, 193, 7, 0.8); /* زرد شفاف */
            color: black;
            animation: fadeInCell 0.5s ease-in-out forwards;
        }

        .student-name {
            font-weight: bold;
            color: #343a40;
            background: rgba(255, 255, 255, 0.15);
            border-radius: 8px 0 0 8px;
        }

        .month-header {
            text-align: center;
            font-size: 1.5rem;
            font-weight: bold;
            background: rgba(241, 241, 241, 0.1);
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 15px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        }

        .controls-container {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            padding: 20px;
            margin-bottom: 20px;
        }

        .year-display {
            text-align: center;
            font-size: 1.3rem;
            margin-bottom: 20px;
            color: #555;
            background: rgba(255, 255, 255, 0.1);
            padding: 10px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        }

        .month-nav, .week-nav {
            display: flex;
            justify-content: space-between;
            margin: 15px 0;
            padding: 0 20px;
        }

            .month-nav button, .week-nav button {
                padding: 10px 20px;
                background: rgba(0, 123, 255, 0.8);
                color: white;
                border: none;
                border-radius: 8px;
                cursor: pointer;
                font-size: 1rem;
                transition: background 0.3s ease, transform 0.3s ease;
                box-shadow: 0 4px 15px rgba(0, 123, 255, 0.3);
            }

                .month-nav button:hover, .week-nav button:hover {
                    background: rgba(0, 86, 179, 0.9);
                    transform: scale(1.05);
                }

        .month-container {
            display: none;
            opacity: 0;
            transition: opacity 0.5s ease;
        }

            .month-container.active {
                display: block;
                opacity: 1;
            }

        .week-header, .week-row {
            display: none;
            opacity: 0;
            transition: opacity 0.5s ease;
        }

            .week-header.active, .week-row.active {
                display: table-cell;
                opacity: 1;
            }

        @@keyframes fadeInCell {
            from {
                opacity: 0;
                transform: scale(0.8);
            }

            to {
                opacity: 1;
                transform: scale(1);
            }
        }

        .attendance-table tbody tr td.week-row.active:nth-child(n+2) {
            animation-delay: calc(0.1s * (var(--cell-index, 0)));
        }
    </style>
</head>

<div class="p-5">
    @if (Model == null || !Model.Any())
    {
        <p>هیچ داده‌ای برای نمایش وجود ندارد.</p>
    }
    else
    {
        <div class="controls-container">
            <div class="year-display">سال شمسی جاری: @currentShamsiYear</div>

            <div class="month-nav">
                <button onclick="prevMonth()">ماه قبلی</button>
                <button onclick="nextMonth()">ماه بعدی</button>
            </div>

            <div class="week-nav">
                <button onclick="prevWeek(currentMonth)">هفته قبلی</button>
                <button onclick="nextWeek(currentMonth)">هفته بعدی</button>
            </div>
        </div>

        @for (int monthIdx = 0; monthIdx < months.Count; monthIdx++)
        {
            var month = months[monthIdx];
            var monthIndex = monthIdx + 1;
            var shamsiMonth = shamsiMonthsMap[monthIdx];
            var shamsiYear = currentShamsiYear;
            if (shamsiMonth < 7)
            {
                shamsiYear += 1;
            }
            var daysInMonth = persianCalendar.GetDaysInMonth(shamsiYear, shamsiMonth);
            var firstDate = persianCalendar.ToDateTime(shamsiYear, shamsiMonth, 1, 0, 0, 0, 0);
            var firstDowIndex = dayIndexMap[firstDate.DayOfWeek];
            var totalDays = daysInMonth + firstDowIndex;
            var totalWeeks = (int)Math.Ceiling((double)totalDays / 7);

            <div class="month-container @(monthIdx == 0 ? "active" : "")" id="month-@monthIndex">
                <h3 class="month-header">@month</h3>
                <table class="attendance-table">
                    <thead>
                        <tr>
                            @for (int week = 1; week <= totalWeeks; week++)
                            {
                                <th colspan="7" class="week-header @(week == 1 ? "active" : "")" id="week-header-@monthIndex-@week">هفته @week</th>
                            }
                        </tr>
                        <tr>
                            <th></th>
                            @for (int week = 1; week <= totalWeeks; week++)
                            {
                                for (int dayIndex = 0; dayIndex < 7; dayIndex++)
                                {
                                    var dayOfMonthCalc = (week - 1) * 7 + dayIndex - firstDowIndex + 1;
                                    if (dayOfMonthCalc >= 1 && dayOfMonthCalc <= daysInMonth)
                                    {
                                        var dayName = daysOfWeek[dayIndex];
                                        var dateStr = $"{shamsiYear}/{shamsiMonth:D2}/{dayOfMonthCalc:D2}";
                                        <th class="week-header @(week == 1 ? "active" : "")" id="week-header-@monthIndex-@week-@dayIndex">@dayName (@dateStr)</th>
                                    }
                                    else
                                    {
                                        <th class="week-header @(week == 1 ? "active" : "")" id="week-header-@monthIndex-@week-@dayIndex"></th>
                                    }
                                }
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var student in students)
                        {
                            var records = attendanceByStudent.GetValueOrDefault(student.StudentId, new List<AttendanceRecord>());
                            int cellIndex = 0; // کانتر برای delay انیمیشن

                            <tr>
                                <td class="student-name">@student.Name @student.LastName</td>
                                @for (int week = 1; week <= totalWeeks; week++)
                                {
                                    for (int dayIndex = 0; dayIndex < 7; dayIndex++)
                                    {
                                        var dayOfMonth = (week - 1) * 7 + dayIndex - firstDowIndex + 1;
                                        if (dayOfMonth < 1 || dayOfMonth > daysInMonth)
                                        {
                                            <td class="week-row @(week == 1 ? "active" : "")" id="week-row-@monthIndex-@week-@dayIndex"></td>
                                            continue;
                                        }

                                        var targetDate = persianCalendar.ToDateTime(shamsiYear, shamsiMonth, dayOfMonth, 0, 0, 0, 0);

                                        var attendanceForDay = records.FirstOrDefault(r => r.Date != null && r.Date.Date == targetDate.Date);

                                        string cellText = "-";
                                        string cellClass = "missing";
                                        if (attendanceForDay != null)
                                        {
                                            cellText = attendanceForDay.IsPresent ? "✔️" : "❌";
                                            cellClass = attendanceForDay.IsPresent ? "present" : "absent";
                                        }

                                        <td class="week-row @(week == 1 ? "active" : "") @cellClass" id="week-row-@monthIndex-@week-@dayIndex" style="--cell-index: @(cellIndex);">@cellText</td>
                                        cellIndex++;
                                    }
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    }
</div>

<script>
    let currentMonth = 1;
    let currentWeeks = {};
    let totalWeeksPerMonth = new Array(13);
    @for (int monthIdx = 0; monthIdx < months.Count; monthIdx++)
    {
        var monthIndex = monthIdx + 1;
        var shamsiMonth = shamsiMonthsMap[monthIdx];
        var shamsiYear = currentShamsiYear;
        if (shamsiMonth < 7) { shamsiYear += 1; }
        var daysInMonth = persianCalendar.GetDaysInMonth(shamsiYear, shamsiMonth);
        var firstDate = persianCalendar.ToDateTime(shamsiYear, shamsiMonth, 1, 0, 0, 0, 0);
        var firstDowIndex = dayIndexMap[firstDate.DayOfWeek];
        var totalDays = daysInMonth + firstDowIndex;
        var totalWeeks = (int)Math.Ceiling((double)totalDays / 7);
        <text>totalWeeksPerMonth[@monthIndex] = @totalWeeks;</text>
    }

    function showMonth(monthIndex) {
        document.querySelectorAll('.month-container').forEach(container => {
            container.classList.remove('active');
        });
        document.getElementById(`month-${monthIndex}`).classList.add('active');
        currentMonth = monthIndex;

        document.querySelector('button[onclick="prevMonth()"]').disabled = (monthIndex === 1);
        document.querySelector('button[onclick="nextMonth()"]').disabled = (monthIndex === 12);

        // به‌روزرسانی ناوبری هفته بر اساس ماه جدید
        showWeek(monthIndex, currentWeeks[monthIndex] || 1);
    }

    function prevMonth() {
        if (currentMonth > 1) {
            showMonth(currentMonth - 1);
        }
    }

    function nextMonth() {
        if (currentMonth < 12) {
            showMonth(currentMonth + 1);
        }
    }

    function showWeek(monthIndex, week) {
        document.querySelectorAll(`#month-${monthIndex} .week-header, #month-${monthIndex} .week-row`).forEach(elem => {
            elem.classList.remove('active');
        });
        document.querySelectorAll(`#month-${monthIndex} [id^="week-header-${monthIndex}-${week}"], #month-${monthIndex} [id^="week-row-${monthIndex}-${week}-"]`).forEach(elem => {
            elem.classList.add('active');
        });
        currentWeeks[monthIndex] = week;

        document.querySelector(`button[onclick="prevWeek(currentMonth)"]`).disabled = (week === 1);
        document.querySelector(`button[onclick="nextWeek(currentMonth)"]`).disabled = (week === totalWeeksPerMonth[monthIndex]);
    }

    function prevWeek(monthIndex) {
        let currentWeek = currentWeeks[monthIndex] || 1;
        if (currentWeek > 1) {
            showWeek(monthIndex, currentWeek - 1);
        }
    }

    function nextWeek(monthIndex) {
        let currentWeek = currentWeeks[monthIndex] || 1;
        if (currentWeek < totalWeeksPerMonth[monthIndex]) {
            showWeek(monthIndex, currentWeek + 1);
        }
    }

    showMonth(1);
</script>
