// <auto-generated />
using System;
using AliMartinCv.DataLayer.context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AliMartinCv.DataLayer.Migrations
{
    [DbContext(typeof(AliMartinCvContext))]
    [Migration("20240715224817_AddIsDeletedToGroup")]
    partial class AddIsDeletedToGroup
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AliMartinCv.DataLayer.Entities.Blog", b =>
                {
                    b.Property<Guid>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BlogDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BlogGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("BlogIsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("BlogPublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BlogShortDescription")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("BlogSubGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BlogThumbnail")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("BlogTitle")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Visit")
                        .HasColumnType("int");

                    b.HasKey("BlogId");

                    b.HasIndex("BlogGroupId");

                    b.HasIndex("BlogSubGroupId");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("AliMartinCv.DataLayer.Entities.BlogGroup", b =>
                {
                    b.Property<Guid>("BlogGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BlogGroupParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BlogGroupTitle")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("BlogGroupId");

                    b.HasIndex("BlogGroupParentId");

                    b.ToTable("BlogGroups");
                });

            modelBuilder.Entity("AliMartinCv.DataLayer.Entities.Blog", b =>
                {
                    b.HasOne("AliMartinCv.DataLayer.Entities.BlogGroup", "BlogGroup")
                        .WithMany("Blogs")
                        .HasForeignKey("BlogGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AliMartinCv.DataLayer.Entities.BlogGroup", "SubGroup")
                        .WithMany("SubGroupBlogs")
                        .HasForeignKey("BlogSubGroupId");

                    b.Navigation("BlogGroup");

                    b.Navigation("SubGroup");
                });

            modelBuilder.Entity("AliMartinCv.DataLayer.Entities.BlogGroup", b =>
                {
                    b.HasOne("AliMartinCv.DataLayer.Entities.BlogGroup", null)
                        .WithMany("SubGroups")
                        .HasForeignKey("BlogGroupParentId");
                });

            modelBuilder.Entity("AliMartinCv.DataLayer.Entities.BlogGroup", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("SubGroupBlogs");

                    b.Navigation("SubGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
