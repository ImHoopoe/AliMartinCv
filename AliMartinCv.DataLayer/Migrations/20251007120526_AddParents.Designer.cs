// <auto-generated />
using System;
using AliMartinCv.DataLayer.context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AliMartinCv.DataLayer.Migrations
{
    [DbContext(typeof(AliMartinCvContext))]
    [Migration("20251007120526_AddParents")]
    partial class AddParents
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AliMartinCv.DataLayer.Entities.Attendance", b =>
                {
                    b.Property<int>("AttendanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttendanceId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPresent")
                        .HasColumnType("bit");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("AttendanceId");

                    b.HasIndex("StudentId");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("AliMartinCv.DataLayer.Entities.Blog", b =>
                {
                    b.Property<Guid>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BlogDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BlogGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("BlogIsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("BlogPublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BlogShortDescription")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("BlogSubGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BlogThumbnail")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("BlogTitle")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("Visit")
                        .HasColumnType("int");

                    b.HasKey("BlogId");

                    b.HasIndex("BlogGroupId");

                    b.HasIndex("BlogSubGroupId");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("AliMartinCv.DataLayer.Entities.BlogGroup", b =>
                {
                    b.Property<Guid>("BlogGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BlogGroupParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BlogGroupTitle")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("BlogGroupId");

                    b.HasIndex("BlogGroupParentId");

                    b.ToTable("BlogGroups");
                });

            modelBuilder.Entity("AliMartinCv.DataLayer.Entities.Class", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassId"));

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("ClassId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("AliMartinCv.DataLayer.Entities.Parent", b =>
                {
                    b.Property<Guid>("ParentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ParentId");

                    b.ToTable("Parents");
                });

            modelBuilder.Entity("AliMartinCv.DataLayer.Entities.School", b =>
                {
                    b.Property<int>("SchoolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SchoolId"));

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SchoolId");

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("AliMartinCv.DataLayer.Entities.Student", b =>
                {
                    b.Property<Guid>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StudentId");

                    b.HasIndex("ClassId");

                    b.HasIndex("ParentId")
                        .IsUnique()
                        .HasFilter("[ParentId] IS NOT NULL");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("AliMartinCv.DataLayer.Entities.StudentInformation", b =>
                {
                    b.Property<Guid>("StudentInformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AcademicHistory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccessToTechnology")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ChildOrder")
                        .HasColumnType("int");

                    b.Property<string>("ChronicDiseases")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CognitiveAbilities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommonDiseases")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("EducationalResources")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FamilyHealthStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("FamilyIncome")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FamilyMemberCount")
                        .HasColumnType("int");

                    b.Property<string>("FamilyStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FatherDeceasedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FatherOccupation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasAcademicHistory")
                        .HasColumnType("bit");

                    b.Property<bool>("HasAcceleratedLearning")
                        .HasColumnType("bit");

                    b.Property<bool>("HasAccessToTechnology")
                        .HasColumnType("bit");

                    b.Property<bool>("HasChronicDiseases")
                        .HasColumnType("bit");

                    b.Property<bool>("HasCognitiveAbilities")
                        .HasColumnType("bit");

                    b.Property<bool>("HasCommonDiseases")
                        .HasColumnType("bit");

                    b.Property<bool>("HasEducationalResources")
                        .HasColumnType("bit");

                    b.Property<bool>("HasFamilyHealthStatus")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHospitalizationHistory")
                        .HasColumnType("bit");

                    b.Property<bool>("HasLateArrivals")
                        .HasColumnType("bit");

                    b.Property<bool>("HasMentalDisorders")
                        .HasColumnType("bit");

                    b.Property<bool>("HasPastSocialOrLegalProblems")
                        .HasColumnType("bit");

                    b.Property<bool>("HasPhysicalDisabilities")
                        .HasColumnType("bit");

                    b.Property<bool>("HasPsychologicalStatus")
                        .HasColumnType("bit");

                    b.Property<bool>("HasRepeatedGrades")
                        .HasColumnType("bit");

                    b.Property<bool>("HasSexualMaturity")
                        .HasColumnType("bit");

                    b.Property<bool>("HasSocialInteraction")
                        .HasColumnType("bit");

                    b.Property<bool>("HasSocialProblems")
                        .HasColumnType("bit");

                    b.Property<bool>("HasSocialSupport")
                        .HasColumnType("bit");

                    b.Property<bool>("HasStudentHealthStatus")
                        .HasColumnType("bit");

                    b.Property<bool>("HasSurgicalHistory")
                        .HasColumnType("bit");

                    b.Property<bool>("HasTechnologyUsageHours")
                        .HasColumnType("bit");

                    b.Property<string>("HousingType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCompeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDivorced")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFatherDeceased")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFatherEmployed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMotherDeceased")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMotherEmployed")
                        .HasColumnType("bit");

                    b.Property<string>("Medications")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MentalDisorders")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("MotherDeceasedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MotherOccupation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentWithWhomLiving")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PastSocialOrLegalProblems")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhysicalDisabilities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PsychologicalStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SexualMaturityStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SiblingsCount")
                        .HasColumnType("int");

                    b.Property<string>("SocialInteraction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SocialProblems")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SocialSupport")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentHealthStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SurgicalHistory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TechnologyUsageHours")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("UsesPrescriptionMedications")
                        .HasColumnType("bit");

                    b.HasKey("StudentInformationId");

                    b.ToTable("StudentsInformations");
                });

            modelBuilder.Entity("AliMartinCv.DataLayer.Entities.Attendance", b =>
                {
                    b.HasOne("AliMartinCv.DataLayer.Entities.Student", "Student")
                        .WithMany("Attendances")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("AliMartinCv.DataLayer.Entities.Blog", b =>
                {
                    b.HasOne("AliMartinCv.DataLayer.Entities.BlogGroup", "BlogGroup")
                        .WithMany("Blogs")
                        .HasForeignKey("BlogGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AliMartinCv.DataLayer.Entities.BlogGroup", "SubGroup")
                        .WithMany("SubGroupBlogs")
                        .HasForeignKey("BlogSubGroupId");

                    b.Navigation("BlogGroup");

                    b.Navigation("SubGroup");
                });

            modelBuilder.Entity("AliMartinCv.DataLayer.Entities.BlogGroup", b =>
                {
                    b.HasOne("AliMartinCv.DataLayer.Entities.BlogGroup", null)
                        .WithMany("SubGroups")
                        .HasForeignKey("BlogGroupParentId");
                });

            modelBuilder.Entity("AliMartinCv.DataLayer.Entities.Class", b =>
                {
                    b.HasOne("AliMartinCv.DataLayer.Entities.School", "School")
                        .WithMany("Classes")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("AliMartinCv.DataLayer.Entities.Student", b =>
                {
                    b.HasOne("AliMartinCv.DataLayer.Entities.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AliMartinCv.DataLayer.Entities.Parent", "Parent")
                        .WithOne("Student")
                        .HasForeignKey("AliMartinCv.DataLayer.Entities.Student", "ParentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Class");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("AliMartinCv.DataLayer.Entities.BlogGroup", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("SubGroupBlogs");

                    b.Navigation("SubGroups");
                });

            modelBuilder.Entity("AliMartinCv.DataLayer.Entities.Class", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("AliMartinCv.DataLayer.Entities.Parent", b =>
                {
                    b.Navigation("Student")
                        .IsRequired();
                });

            modelBuilder.Entity("AliMartinCv.DataLayer.Entities.School", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("AliMartinCv.DataLayer.Entities.Student", b =>
                {
                    b.Navigation("Attendances");
                });
#pragma warning restore 612, 618
        }
    }
}
